//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmpDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompanyEntities : DbContext
    {
        public CompanyEntities()
            : base("name=CompanyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Association> Associations { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<IdPhn> IdPhns { get; set; }
    
        public virtual int spAddEmployee(string empFn, string empLn, string empAddress, string empPhno, string gender, ObjectParameter empId)
        {
            var empFnParameter = empFn != null ?
                new ObjectParameter("EmpFn", empFn) :
                new ObjectParameter("EmpFn", typeof(string));
    
            var empLnParameter = empLn != null ?
                new ObjectParameter("EmpLn", empLn) :
                new ObjectParameter("EmpLn", typeof(string));
    
            var empAddressParameter = empAddress != null ?
                new ObjectParameter("EmpAddress", empAddress) :
                new ObjectParameter("EmpAddress", typeof(string));
    
            var empPhnoParameter = empPhno != null ?
                new ObjectParameter("EmpPhno", empPhno) :
                new ObjectParameter("EmpPhno", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEmployee", empFnParameter, empLnParameter, empAddressParameter, empPhnoParameter, genderParameter, empId);
        }
    
        public virtual int spAddIdPhn(Nullable<int> empId, string homePhn)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var homePhnParameter = homePhn != null ?
                new ObjectParameter("HomePhn", homePhn) :
                new ObjectParameter("HomePhn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddIdPhn", empIdParameter, homePhnParameter);
        }
    
        public virtual int spGetCountByGender(string gend, ObjectParameter empcount)
        {
            var gendParameter = gend != null ?
                new ObjectParameter("gend", gend) :
                new ObjectParameter("gend", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetCountByGender", gendParameter, empcount);
        }
    
        public virtual ObjectResult<spGetEmployees_Result> spGetEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployees_Result>("spGetEmployees");
        }
    
        public virtual ObjectResult<spGetEmployeesByLastName_Result> spGetEmployeesByLastName(string lname)
        {
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeesByLastName_Result>("spGetEmployeesByLastName", lnameParameter);
        }
    }
}
